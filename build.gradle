
plugins {
    id 'java-library'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

repositories {
    jcenter()
}

ext.moduleName = 'com.github.nwillc.fluentsee'
version = '1.0.0'

dependencies {
    implementation "org.tinylog:tinylog:$tiny_log_version",
            "com.fasterxml.jackson.core:jackson-core:$jackson_fasterxml_version",
            "com.fasterxml.jackson.core:jackson-databind:$jackson_fasterxml_version",
            "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_fasterxml_version",
            "net.sf.jopt-simple:jopt-simple:$jopt_version"

    testImplementation "org.assertj:assertj-core:$assertj_version",
            "junit:junit:$junit_version",
            "com.github.nwillc:jdk_contract_tests:$jdk_contract_tests_version"
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = ['--module-path', classpath.asPath]
        classpath = files()
    }
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

test {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir,
                                                         sourceSets.test.resources.srcDirs).asPath]
        classpath = files()
    }
}

shadowJar {
    baseName = "$project.name-$project.version"
    mainClassName = 'com.github.nwillc.fluentsee.Main'
    classifier = null
    version = null
}
